/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useEffect, useState } from "react";
import { holderConfig, issuerConfig, verifierConfig } from "../config/env.config";
import { ConnectionService } from "../services/connection.service";
import { Button, Table, Tooltip } from "antd";

import { DeleteOutlined } from "@ant-design/icons";
import { useAuth } from "../contexts/AuthContext";


const states = [
    "abandoned",
    "active",
    "completed",
    "error",
    "init",
    "invitation",
    "request",
    "response",
    "start",
];
  
const stateFilters = states.map((state) => ({
    text: state,
    value: state,
}));

const ConnectionsPage: React.FC = () => {
    const { user, logout } = useAuth();
    
    const [connections, setConnections] = useState<any[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    const config = issuerConfig;
    const service = ConnectionService.getInstance(config);

    const getConnections = async () => {
        const connections = await service.getConnections();
        console.log('connections', connections);
        setConnections(connections.results);
    };

    const onDeleteClicked = async (connectionId: string) => {
        try {
            const response = await service.deleteConnection(connectionId);
            if (response) {
                getConnections();
            }
        } catch (e) {
            console.error(e);
        }
    };

    useEffect(() => {
        getConnections();
    }, []);

    const columns = [
        {
            title: "Connection ID",
            dataIndex: "connection_id",
            key: "connection_id",
        },
        { title: "Target", dataIndex: "their_label", key: "their_label" },
        {
            title: "State",
            dataIndex: "state",
            key: "state",
            filters: stateFilters,
            onFilter: (value: string, record: { state: string | string[]; }) => record.state.indexOf(value as string) === 0,
        },
        {
            title: "Action",
            dataIndex: "action",
            key: "action",
            align: "center" as const,
            width: "200px",
            render: (_: any, record: any) => (
              <>
                <Tooltip title="Delete connection">
                  <Button
                    type="link"
                    icon={<DeleteOutlined />}
                    danger
                    size="large"
                    onClick={() => onDeleteClicked(record["connection_id"])}
                  />
                </Tooltip>
              </>
            ),
        },
    ];

    const dataSource = connections.map((row: any, index: any) => ({
        connection_id: row["connection_id"],
        their_label: row["their_label"],
        state: row["state"],
        key: row["connection_id"],
    }));

    return (
        <div>
        <h1>Connections</h1>
        <Table
            loading={loading}
            size={'large'}
            dataSource={dataSource}
            columns={columns}
            showSorterTooltip={{ target: "sorter-icon" }}
            pagination={{
            showSizeChanger: true,
            pageSizeOptions: ["10", "25", "50", "100", "200"],
            showTotal: (total, range) =>
                `${range[0]}-${range[1]} จาก ${total} รายการ`,
            }}
        />
        </div>
    );
}
export default ConnectionsPage;