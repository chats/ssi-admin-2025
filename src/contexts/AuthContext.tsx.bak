import React, { createContext, useContext, useState, useEffect } from 'react';
import { message } from 'antd';
import { AuthContextType, AuthProviderProps, UserType } from '../types/auth.types';
import { authService } from '../services/auth.service';

// สร้าง default context value
const defaultContextValue: AuthContextType = {
  isAuthenticated: false,
  user: null,
  login: () => Promise.resolve(),  // ปรับให้เป็น Promise
  logout: () => Promise.resolve(), // ปรับให้เป็น Promise
  loading: false,
  error: null,
};

// สร้าง context ด้วย default value
const AuthContext = createContext<AuthContextType>(defaultContextValue);

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<UserType | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initAuth = async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');
      const state = urlParams.get('state');
      const error = urlParams.get('error');
      const errorDescription = urlParams.get('error_description');

      console.log('Auth initialization parameters:', {
        code: code ? 'present' : 'absent',
        state,
        error,
        errorDescription
      });

      try {
        if (error || errorDescription) {
          throw new Error(errorDescription || error || 'Authentication failed');
        }

        if (code) {
          setLoading(true);
          await handleCallback(code, state);
        }
      } catch (err) {
        console.error('Auth initialization failed:', err);
        setError(err instanceof Error ? err.message : 'Authentication failed');
        message.error('Authentication failed');
      } finally {
        setLoading(false);
      }
    };

    initAuth();
  }, []);

  const handleCallback = async (code: string, state: string | null) => {
    try {
      await authService.handleCallback(code, state);
      const userInfo = await authService.getUserInfo();
      
      setUser(userInfo);
      setIsAuthenticated(true);
      
      // Clean up URL and redirect to home
      const baseUrl = window.location.origin;
      window.history.replaceState({}, document.title, baseUrl);
      
      message.success('Successfully logged in!');
    } catch (err) {
      console.error('Callback handling failed:', err);
      setError(err instanceof Error ? err.message : 'Authentication failed');
      throw err;
    }
  };

  // Define login function before using it in context value
  const login = async (): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      await authService.initiateLogin();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Login failed');
      message.error('Login failed');
    } finally {
      setLoading(false);
    }
  };

  // Define logout function before using it in context value
  const logout = async (): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      await authService.logout();
      setIsAuthenticated(false);
      setUser(null);
      message.info('Logged out successfully');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Logout failed');
      message.error('Logout failed');
    } finally {
      setLoading(false);
    }
  };

  // Create context value object
  const contextValue: AuthContextType = {
    isAuthenticated,
    user,
    login,
    logout,
    loading,
    error,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};